{"pageProps":{"postData":{"id":"KnowledgeAsAnAPI","htmlContent":"<p>Do you ever come across a technology or concept and say to yourself, \"This is insane, how can anyone understand this?\". If so, this essay may help you to answer that question; how do people understand extremely complex concepts?</p>\n<p>Central Processing Units (CPUs) are a particularly bewildering piece of technology. These 2 inch squares of silicon are the brains behind a computer, a machine capable of solving all solvable problems given enough time and resources.</p>\n<p><img src=\"https://www.apple.com/v/mac/m1/a/images/overview/chip__fffqz3ljssi2_large.jpg\" alt=\"Apple&#x27;s new M1 chip\">\nApple's new M1 chip</p>\n<p>\"The people who make CPUs must have superhuman intellect\" I think to myself. This may be true to an extent, chip makers and CPU designers are very bright, however their domain expertise is likely isolated to an extremely specific component of the CPU. It is important when analyzing any complex concept to acknowledge all of its components. In the case of a CPU, there are thousands of components built on top of each-other, eventually resulting in the CPU.</p>\n<p>Don't be disheartened if a concept appears incomprehensible at first glance, it may very well be incomprehensible to those who created it, particularly when that concept is at the bleeding edge of technology. How can a CPU designer design a CPU without understanding all of its inner workings? The same way an architect designs a house without understanding the details of construction, the same way a software developer uses an API without understanding its implementation details. Complex technologies and concepts are not the result of omniscient individuals, but rather layers of knowledge, built upon, and composed of one-another. The authors of these layers of knowledge are the specialists, who have spent years mastering the knowledge associated with their layer. The mental model for understanding these layer's, and the central topic of this essay, is <strong>Knowledge APIs</strong></p>\n<blockquote>\n<p>Knowledge API: A mental model for thinking about the understanding of a specific domain as an Application Programming Interface (API). Knowledge APIs depend on, and can be used by one-another. A knowledge API is like a module in a programming language, it depends on (imports) other knowledge APIs, and can be used by (exported) other knowledge APIs. - Chris Behan</p>\n</blockquote>\n<p>To illustrate the idea of a knowledge API, let's use CPUs as an example. Suppose one of the knowledge APIs used in CPU production is dedicated to the etching of microscopic lines into silicon. An example function from this API would be:</p>\n<pre><code class=\"language-jsx\">//MicroscopicLaserEtchingAPI\nfunction EtchMicroscopicLineIntoSilicon(startPos, endPos) {\n  // Code instructing laser to etch microscopic line from startPos to endPos\n}\n</code></pre>\n<p>The group of people responsible for the implementation of <code>EtchMicroscopicLineIntoSilicon</code> understand how it works. They know all about the optics of the laser, and how manipulate its exact position. They know the physical properties of the silicon chip, and how it reacts when it comes in contact with the laser. They do <strong>not</strong> know how the fruits of their knowledge are leveraged by the layers above. They have no insight into how the lines they produce may be composed to represent logic gates. That is where the next layer of the Knowledge API comes into play; the group responsible for composing the lines into logical structures. This layer of the knowledge API (Let's call them the Logical Structures API) has functions like:</p>\n<pre><code class=\"language-jsx\">//LogicalStructuresAPI\nimport { EtchMicroscopicLineIntoSilicon } from \"MicroscopicLaserEtchingAPI\";\n\nfunction CreateANDGate() {\n  const xPos = CalculateANDGateXPos(); // function within this knowledge API\n  const yPos = CalculateANDGateYPos(); // function within this knowledge API\n  EtchMicroscopicLineIntoSilicon(xPos, yPos);\n}\n</code></pre>\n<p>The people in this layer are dedicated to composing the logical structures that make up the CPU. They do not understand the implementation details of the layer below them, such as how a microscopic laser is able to precisely engrave nanometer thick lines into silicon. They must trust and use functions from the <code>MicroscopeLaserEthcingAPI</code>. The authors of the <code>LogicalStructuresAPI</code> depend on the correctness of the <code>MicroscopicLaserEtchingAPI</code>, in this case, that <code>EtchMicroscopicLineIntoSillicon</code> really does etch a line into the silicon chip, at precisely the location specified. The idea of trust is core to knowledge APIs. If a knowledge API does not do exactly what it says, and that knowledge API is used by another knowledge API, incorrect behavior will be introduced to the system.</p>\n<p>The process of knowledge APIs built on-top of one-another continues for hundreds (sometimes thousands) of layers, producing results that to the untrained eye appear magical. But there is no magic, just layers of abstractions masterfully crafted by experts of that knowledge API. Sometimes individuals, through years of hard work and deliberate practice, are able to understand and master multiple knowledge APIs, but no one understands all of them. Similar to how no-one alive <a href=\"https://www.reddit.com/r/math/comments/2vy8g1/who_was_the_last_person_to_know_all_of_mathematics/\">knows all of mathematics</a>, no-one alive understands all the knowledge APIs that compose CPU production, or almost any other moderately complex field.</p>\n<p>Every domain can be thought of in terms of the composition of knowledge APIs. An example that deviates from the more analytical examples given thus far would be the knowledge APIs of Basketball. Basketball players must learn the knowledge APIs of shooting, ball-handling and defending, each of which is composed of lower-level APIs, like free-throws, cross-over, and steal, to name a few. At an even lower level, basketball can be thought of as depending on the knowledge API's of nutrition, and neuroplasticity that your brain undergoes through practice. Breaking down your current domain of interest into layers of knowledge APIs is a useful tool for introspection and evaluating what you need to improve on. Setting goals like \"I need to get better at basketball\" is shallow and hard to work with. But breaking down basketball into its various knowledge APIs and evaluating which of those you need to improve upon can yield much more tangible goals: \"I need to increase the speed of my cross-over and improve my help-defense\".</p>\n<p>Experiment with different knowledge APIs, invest time into finding one that interests you, then start working towards mastery with that knowledge API. Don't be disheartened by the fact that you don't understand the implementation details of your knowledge API's dependencies, no-one does. <a href=\"https://en.wikipedia.org/wiki/Jim_Keller_(engineer)\">Jim Keller</a> co-authored the design of the x86-64 CPU architecture without understanding the implementation details of how the CPU is actually manufactured. The <a href=\"https://en.wikipedia.org/wiki/Russo_brothers\">Russo brothers</a> directed <a href=\"https://www.marvel.com/movies/avengers-infinity-war\">Infinity War</a> without understanding the implementation details of VFX, and <a href=\"https://en.wikipedia.org/wiki/Khabib_Nurmagomedov\">Khabib Nurmagomedov</a> had one of the most dominant careers in mma history without understanding the implementation details of nutrition or the neuroplasticity of training.</p>\n<p>Knowledge APIs exist in every domain. Thinking about knowledge as an API, and accepting that APIs can be useful without understanding their implementation details, or the implementation details of their dependencies, can be a reassuring call to action.</p>\n<p>I hope this essay has added a useful mental model to your intellectual toolbox. ðŸ§  ðŸ§°</p>\n","title":"Knowledge as an API","date":"2020-11-15"}},"__N_SSG":true}